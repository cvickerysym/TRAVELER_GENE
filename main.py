import os
import sys
from datetime import datetime
from PSBOTS import run_psbots
from OOSPSBOTS import run_oospsbots

def resource_path(relative_path):

    try:
        base_path = getattr(sys, "_MEIPASS", os.path.abspath("."))  # Safe _MEIPASS handling
    except AttributeError:
        base_path = os.path.abspath(".")
    return os.path.join(base_path, relative_path)

# Update your PDF template paths
template_alpha = resource_path("SymBot AlphaC Traveler v16.pdf")
template_symbot = resource_path("SymBot 1.0 Traveler vH.pdf")

def run_combined_bot_process():
    """
    Main process for handling PSBOTS and OOSPSBOTS.
    """
    date_time = str(datetime.now().date())

    try:
        # Get Bot IDs from user input
        bot_select = input("Input BotIDs (space-separated): ")
        bot_list = [int(num) for num in bot_select.split()]  # Convert to list of integers

        # Define output directory
        output_dir = f"C:/Users/cvickery/TRAVELER_PDFs{date_time}"
        os.makedirs(output_dir, exist_ok=True)

        # Run PSBOTS process
        psbots_generated_files, missing_bots = run_psbots(bot_list, output_dir)

        # Handle NoneType for psbots_generated_files
        if psbots_generated_files is None:
            psbots_generated_files = []

        # Combine missing bots from PSBOTS with those with blank alarms
        all_missing_bots = [bot_id for bot_id in bot_list if bot_id not in psbots_generated_files] + missing_bots

        # Run OOSPSBOTS if there are any missing bots
        if all_missing_bots:
            print(f"Running OOSPSBOTS for missing bot IDs: {all_missing_bots}")
            run_oospsbots(all_missing_bots, output_dir)
        else:
            print("All files were successfully generated by PSBOTS.")

    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    run_combined_bot_process()
